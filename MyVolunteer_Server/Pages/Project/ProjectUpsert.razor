@page "/project/create"
@page "/project/edit/{id:int}"
@inject ICategoryRepository _categoryRepository
@inject IProjectRepository _projectRepository
@inject NavigationManager _navigationManager
@inject IFileUpload _fileUpload
@inject IJSRuntime _jsRuntime
@attribute [Authorize]

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Project</h3>

    <div class="col-md-10">
        @if (IsLoading)
        {
             <div class="text-center">
                <img src="/images/loading.gif">
                    </div>
        }
        else{
        <EditForm Model="Project" OnValidSubmit="UpsertProject">
            <DataAnnotationsValidator/>
            <div class="form-group">
                <label>Name</label>
                <InputText @bind-Value="Project.Name" class="form-control"></InputText> 
                <ValidationMessage For="()=>Project.Name"></ValidationMessage>
            </div>            
             <div class="form-group">
                <label>Description</label>
                <SfRichTextEditor @bind-Value="Project.Description"></SfRichTextEditor> 
                <ValidationMessage For="()=>Project.Description"></ValidationMessage>
            </div>

            <div class="row pt-3">
                <div class="form-group col-6">
                <div class="form-check">
                    <InputCheckbox @bind-Value="Project.OrganisationFavourite" class="form-check-input"></InputCheckbox>
                    <label class="form-check-label">Is Organisation favourites</label>
                </div>
                </div>
                <div class="form-group col-6">
                <div class="form-check">
                    <InputCheckbox @bind-Value="Project.VolunteerFavourite" class="form-check-input"></InputCheckbox>
                    <label class="form-check-label">Is Volumteer Favourites</label>
                </div>
                </div>
                 <div class="form-group col-6">
                     <label>Category</label>
                    <InputSelect @bind-Value="Project.CategoryId" class="form-select">
                        <option value="0" disabled="disabled" selected>--Select Category--</option> 
                            @foreach(var cat in Categories)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }

                    </InputSelect>
                     <ValidationMessage For="()=>Project.CategoryId"></ValidationMessage>
                </div>
                <div class="form-group pt-4 col-6">
                    <InputFile OnChange="HandleImageUpload"></InputFile>
                </div>
            </div>

              
            <div class="form-group py-2">
                <button class="btn btn-primary">@Title</button>
                <NavLink href="project" class="btn btn-secondary">Back to Index</NavLink>
            </div>
        </EditForm>
        }
    </div>
    <div class="col-md-2">
        <img src="@Project.ImageUrl" class="w-100">
    </div>
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    private ProjectDTO Project { get; set; } = new()
    {
        ImageUrl="/images/default.png"
    };
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; } 
    public string OldImageUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
        }

    }

    private async Task LoadProduct()
    {
        IsLoading=true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        if (Id!=0)
        {
            //update
            Title="Update";
            Project = await _projectRepository.Get(Id);
            OldImageUrl = Project.ImageUrl;
        }

        IsLoading=false;
        StateHasChanged();
    }
    private  async Task UpsertProject()
    {
        if (Project.Id==0)
        {
            //create
            await _projectRepository.Create(Project);
            await _jsRuntime.ToastrSuccess("Project created successfully.");
        }
        else
        {
            //update
            if (OldImageUrl!=Project.ImageUrl)
            {
                _fileUpload.DeleteFile(OldImageUrl);

            }
            await _projectRepository.Update(Project);
            await _jsRuntime.ToastrSuccess("Project updated successfully.");
        }
        _navigationManager.NavigateTo("project");


    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsLoading=true;
        try
        {
            if (e.GetMultipleFiles().Count>0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                      fileInfo.Extension.ToLower() == ".png" ||
                      fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        Project.ImageUrl = await _fileUpload.UploadFile(file);
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }
                }
            }
            IsLoading=false;
        }
        catch(Exception ex)
        {
             await _jsRuntime.ToastrError(ex.Message);
        }
    }
}
